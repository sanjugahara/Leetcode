package com.daimens.algorithm.august;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

public class SolutionDay06_L0656 {
	
	//dp[i][j] 表示最后一位从第j个位置更新
//	static final int INF = 1 << 29;
//	public List<Integer> cheapestJump(int[] A, int B) {
//		List<Integer> ans = new ArrayList<>();
//		int n = A.length;
//		if (n == 0) return ans;
//		int[] dp = new int[n];
//		Arrays.fill(dp, INF);
//		dp[0] = A[0];
//		for (int i = 1; i < n; ++i){
//			if (A[i] == -1) continue;
//			for (int j = B; j >= 1; --j){
//				if (i - j >= 0){
//					dp[i] = Math.min(dp[i], dp[i - j] + A[i]);
//				}
//			}
//		}
//		if (dp[n - 1] == INF) return ans;
//		dp[n - 1] = -dp[n -1];
//		for (int i = n - 2; i >= 0; --i){
//			for (int j = B; j >= 1; --j){
//				if (i + j >= n) continue;
//				if (dp[i] + A[i + j] == -dp[i + j]){
//					dp[i] = -dp[i];
//				}
//			}
//		}
//		
//		ans.add(1);
//		int cur = 0;
//		int i = 1;
//		while (i < n){
//			int min = INF;
//			int id = -1;	
//			for (int j = i; j < n; ++j){
//				if (dp[j] <= 0 && Math.abs(dp[j]) == Math.abs(dp[cur]) + A[j]){
//					id = j;
//					break;
////					if (min > A[j]){
////						min = A[j];
////						id = j;
////					}
//				}
//			}
//			if (id != -1){
//				ans.add(id + 1);
//				cur = id;
//				i = id;
//			}
//			i ++;
//		}
//		return ans;
//	}
	
	
//	static final int INF = 1 << 29;
//	public List<Integer> cheapestJump(int[] A, int B) {
//		int n = A.length;
//		List<Integer> ans = new ArrayList<>();
//		if (n == 0) return ans;
//		int[] dp = new int[n];
//		int[] path = new int[n];
//		Arrays.fill(dp, INF);
//		dp[0] = A[0];
//		for (int i = 1; i < n; ++i){
//			if (A[i] == -1) continue;
//			for (int j = B; j >= 1; --j){
//				if (i - j >= 0){
//					if (dp[i] > dp[i - j] + A[i]){
//						dp[i] = dp[i - j] + A[i];
//						path[i] = i - j;
//					}
//				}
//			}
//		}
//		if (dp[n - 1] == INF) return ans;
//		
//		Stack<Integer> stack = new Stack<>();
//		stack.push(n - 1 + 1);
//		int cur = n - 1;
//		while (cur != 0){
//			stack.push(path[cur] + 1);
//			cur = path[cur];
//		}
//		
//		while (!stack.isEmpty()) ans.add(stack.pop());
//		
//		return ans;
//	}
	
	static final int INF = 1 << 29;
	public List<Integer> cheapestJump(int[] A, int B) {
		int n = A.length;
		List<Integer> ans = new ArrayList<>();
		if (n == 0) return ans;
		int[] dp = new int[n];
		int[] path = new int[n];
		Arrays.fill(dp, INF);
		dp[n - 1] = A[n - 1];
		for (int i = n - 2; i >= 0; --i){
			if (A[i] == -1) continue;
			for (int j = 1; j <= B; ++j){
				if (i + j >= n || dp[i + j] < 0) continue;
				if (dp[i + j] + A[i] < dp[i]){
					dp[i] = dp[i + j] + A[i];
					path[i] = i + j;
				}
			}
		}
		
		if (dp[0] == INF) return ans;
		ans.add(1);
		int cur = 0;
		while (cur < n - 1){
			ans.add(path[cur] + 1);
			cur = path[cur];
		}
		return ans;
	}
	
//	public List<Integer> cheapestJump(int[] A, int B) {
//		int n = A.length;
//		List<Integer> ans = new ArrayList<>();
//		if (n == 0) return ans;
//		int[][] dp = new int[n + 16][n + 16];
//		for (int i = 0; i < dp.length; ++i) Arrays.fill(dp[i], INF);
//		dp[1][0] = A[0];
//		for (int i = 1; i < n; ++i){
//			if (A[i] == -1) continue;
//			for (int j = B; j >= 1; --j){
//				if (i - j < 0) continue;
//				for (int k = 0; k < i - j + 1; ++k){
//					dp[i + 1][i - j] = Math.min(dp[i + 1][i - j], dp[i - j + 1][k] + A[i]);
//				}
//			}
//		}
//		
//		int min = INF;
//		for (int i = 0; i < n; ++i){
//			min = Math.min(min, dp[n][i]);
//		}
//		if (min == INF) return ans;
//		
//		for (int i = 0; i < n; ++i){
//			if (dp[n][i] == min) dp[n][i] = -dp[n][i];
//		}
//		
//		for (int i = n - 1; i >= 1; --i){
//			for (int j = 1; j <= B; ++j){
//				if (i + j > n) continue; 
//				for (int k = 0; k < n; ++k){
//					if (dp[i][k] + A[i + j - 1] == -dp[i + j][i - 1]){
//						dp[i][k] = -dp[i][k];
//					}
//				}
//			}
//		}
//		
//		int val = INF;
//		int id = -1;
//		for (int j = 0; j < n; ++j){
//			if (dp[1][j] <= 0){
//				if (val > -dp[1][j]){
//					val =  -dp[1][j];
//					id = j;
//				}
//			}
//		}
//		ans.add(id + 1);
//			
//		for (int i = 2; i <= n; ++i){
//			int nd = -1;
//			for (int k = 0; k < n; ++k){
//				for (int j = 0; j < n; ++j){
//					if (dp[i][k] <= 0){
//						if (Math.abs(dp[i][k]) == Math.abs(dp[id + 1][j]) + A[i - 1]){
//							nd = i;
//							k = n;
//							break;
//						}
//					}
//				}
//			}
//			if (nd != -1){
//				ans.add(nd);
//				id = nd - 1;
//				
//			}
//		}
//		return ans;
//    }
	
	
	
	public static void main(String[] args) {
		SolutionDay06_L0656 day = new SolutionDay06_L0656();
		int[] A = { 30, 30, 51, 8, 83, 35, 50, 82, 87, -1, 86, 19, 79, 91, 86, 91, 69, 84, 19, 39, 59, 18, 67, 90, 32,
				22, 68, 71, 73, 66, 6, 33, 60, 52, 21, 67, 59, 19, 65, 94, 92, 75, 44, 95, 23, 80, 34, 54, 64, 4, 59, 8,
				4, 28, 22, 54, 41, 54, 95, 23, 37, 79, 53, 45, 64, 19, 70, 36, 48, 99, 31, 16, 62, 35, 44, 40, 1, 96,
				96, 22, 75, 64, 84, 31, 76, 12, 34, 79, 16, 24, 99, 50, 44, 35, -1, 29, 85, 72, 63, 63, 95, 14, 72, 82,
				68, 78, 96, 82, 49, 51, 77, 74, 44, 16, 60, 39, 2, 42, 44, 1, 97, 52, 16, 30, 65, 37, 56, 42, 10, 74,
				45, 79, 41, 22, 0, 56, 54, 36, 58, 29, 85, 88, 46, 87, 52, 73, 71, 67, 68, 95, 62, 75, 60, 16, 37, 40,
				28, -1, 59, 38, 73, 96, 9, 46, 59, 4, 6, 3, 20, 63, 91, 16, 16, 96, 16, 36, 17, 98, 25, 46, 59, 15, 5,
				77, 63, 81, 5, 32, 87, 92, 51, 84, 74, 41, 88, 24, 45, 5, 41, 21, 15, 52, 19, 38, 7, 74, 89, 36, 84, 5,
				99, 53, 3, 98, 18, 46, 74, 61, 0, 51, 54, 76, 60, 43, 77, 78, 89, 30, 5, 32, 54, 76, 27, 72, 87, 29, 30,
				84, 31, 68, 61, 79, 37, 71, 6, 94, 1, 24, 50, 36, 53, 78, 75, 13, 2, 43, 89, 98, 94, 36, 40, 9, 92, 86,
				19, 21, 45, 32, 47, 57, 36, 83, 64, 86, 85, 74, 47, 35, 18, 1, 30, 58, 40, 12, 3, 64, 25, 90, 17, 91,
				35, 95, 11, 6, 33, 48, 1, 76, 56, 49, 95, 26, 89, 53, 31, 81, 37, 9, 17, 84, 66, 71, 96, 88, 87, 20, 57,
				5, 54, 75, 16, 62, 2, 46, 65, 8, 27, 73, 96, 85, 56, 93, 87, 81, 97, 32, 24, 20, 50, 8, 77, 66, 39, 38,
				89, 52, 43, 0, 43, 52, -1, 11, 67, 3, 26, 31, 36, 99, 99, 38, 39, 35, 27, 79, 12, 1, 60, 69, 97, 89, 98,
				21, 61, 86, 20, 13, 94, 45, 72, 11, 71, 0, 73, 43, 50, 58, 41, 58, 19, 33, 63, 11, 33, 30, 36, 73, 72,
				17, 38, 57, 2, 44, 97, 77, 58, 16, 19, 37, 55, 16, 1, 12, 34, 94, 85, 66, 42, 84, 45, 67, 77, 36, 55, 6,
				61, 0, 97, 64, 88, 27, 39, 45, 72, 58, 12, 57, 73, 60, 84, 72, 46, 47, 4, 70, 75, 23, 84, -1, 45, 62,
				95, 39, 46, 81, 0, 52, 61, 60, 24, 95, 80, 30, 27, 88, 21, 49, 16, 43, 85, 47, 54, 32, 78, 71, 9, 10,
				28, 29, 36, 49, 29, 79, 1, 16, 97, 36, 65, 73, 27, 33, 13, 98, 58, 79, 82, 44, 54, 47, 86, 3, 68, 36,
				69, 32, 13, 60, 91, 32, 73, 31, 44, 15, 43, 86, 22, -1, 78, 74, 99, 95, 3, 68, 88, 70, 37, 39, 38, 96,
				23, 14, 55, 90, 79, 51, 46, 8, 23, 82, 23, 30, 74, 12, 86, 84, 51, 12, 14, 51, 69, 60, 59, 33, 9, 6, 17,
				15, 35, 88, 37, 15, 39, 16, 88, 82, 58, 35, 40, 69, 20, 57, 31, 74, 86, 49, 19, 61, 92, 47, 42, 30, 77,
				3, 22, 48, 72, 89, 90, 92, 15, -1, 78, 0, 79, 9, 66, 44, 55, 90, 80, 49, 68, 63, 58, 54, -1, 1, 21, 29,
				7, 8, 41, 65, 19, 58, 26, 49, 90, 97, 35, 30, 7, 3, 73, 19, 77, 86, 85, 25, 12, 31, 22, 42, 88, 85, 64,
				54, 61, 70, 87, 5, 78, 37, 30, 91, 65, 14, 87, 92, 35, 39, 39, 55, 77, 54, 43, 30, 92, 95, 38, 19, 9,
				45, 21, 10, 60, 73, 14, 85, 25, 32, 10, 40, 78, 78, 12, 63, 78, 15, 46, 34, 28, 97, 94, 87, 60, 90, 64,
				56, 62, 64, 5, 7, 50, 17, 33, 29, 91, 84, 21, 54, 15, 92, 84, 95, 48, 32, 99, 34, 71, 53, -1, 89, 27,
				83, 49, 70, 81, 91, 22, 95, 61, 59, 18, 92, 67, 65, 10, 93, 1, 0, 96, 0, 72, 12, 48, 83, 90, 63, 32, 77,
				15, 20, 63, 72, 38, 76, 30, 74, 52, 5, 11, 81, 37, 92, 81, 58, 31, 97, 90, 72, 62, 39, 76, 38, 26, 82,
				44, 39, 67, 97, 48, 45, 37, 84, 62, 82, 8, 89, 17, 28, 32, 49, 20, 85, 8, 42, 39, 45, 94, 21, 18, 96,
				79, 36, 22, 73, 18, 17, 14, 46, 70, 91, 64, 64, 20, 77, 88, 13, 18, 29, 4, -1, 67, 40, 66, 83, 42, 16,
				39, 83, 1, 18, 81, 0, 65, 69, 22, 33, 75, 44, 72, 74, 84, 60, 6, 87, 4, 0, 95, 56, 52, 12, 75, 41, 3,
				44, 76, 92, 56, 10, 43, 66, 7, 5, 77, 16, 18, 78, 91, 34, 48, 44, 81, 99, 87, 29, 96, 63, 28, 59, 26, 5,
				-1, 90, 62, 21, 73, 65, 91, 47, 3, 52, 71, 41, 80, 57, 21, 59, 48, 46, 6, 0, 28, 93, 47, 59, 89, 56, 33,
				79, 75, 61, 23, 66, 33, 80, 71, 70, 63, 86, 17, 16, 19, 44, 50, 76, 36, 46, 89, 71, 78, 43, 76, 97, 82,
				0, 52, 45, 56, 49, 71, 51, 23, 61, 65, 79, 20, 42, 41, 79, 55, 31, 79, 66, 6, 39, 42, 65, 81, 43, 98,
				24, 77, 82, 43, 55, 98, 93, 22, 63, 34, 58, 3, 69, 77, 13, 11, 76, 20, 70, 67, 85, 55, 95, 44, 87, 29,
				82, 98, 28, 34, 9, 44, 14, 53, 34, 21, 27, 82, 84, 36, 54, 86, 84, 16, 92, 1, 72, 22, 54 };
		//int[] A = { 1, 2, 4, -1, 2 };
		int B = 17;
		System.out.println(day.cheapestJump(A, B));
	}

}
